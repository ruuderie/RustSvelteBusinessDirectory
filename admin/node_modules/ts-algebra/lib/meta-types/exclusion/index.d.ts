import type { AnyType } from "ts-algebra/lib/meta-types/any";
import type { ArrayType } from "ts-algebra/lib/meta-types/array";
import type { ConstType } from "ts-algebra/lib/meta-types/const";
import type { EnumType } from "ts-algebra/lib/meta-types/enum";
import type { Never, NeverType } from "ts-algebra/lib/meta-types/never";
import type { ObjectType } from "ts-algebra/lib/meta-types/object";
import type { PrimitiveType } from "ts-algebra/lib/meta-types/primitive";
import type { TupleType } from "ts-algebra/lib/meta-types/tuple";
import type { Type } from "ts-algebra/lib/meta-types/type";
import type { UnionType } from "ts-algebra/lib/meta-types/union";
import type { ExcludeFromAny } from "ts-algebra/lib/meta-types/exclusion/any";
import type { ExcludeFromArray } from "ts-algebra/lib/meta-types/exclusion/array";
import type { ExcludeFromConst } from "ts-algebra/lib/meta-types/exclusion/const";
import type { ExcludeFromEnum } from "ts-algebra/lib/meta-types/exclusion/enum";
import type { ExcludeFromObject } from "ts-algebra/lib/meta-types/exclusion/object";
import type { ExcludeFromPrimitive } from "ts-algebra/lib/meta-types/exclusion/primitive";
import type { ExcludeFromTuple } from "ts-algebra/lib/meta-types/exclusion/tuple";
import type { ExcludeFromUnion } from "ts-algebra/lib/meta-types/exclusion/union";
export declare type _Exclude<META_TYPE_A extends Type, META_TYPE_B extends Type> = _$Exclude<META_TYPE_A, META_TYPE_B>;
export declare type _$Exclude<META_TYPE_A, META_TYPE_B> = META_TYPE_A extends NeverType ? META_TYPE_A : META_TYPE_A extends AnyType ? ExcludeFromAny<META_TYPE_A, META_TYPE_B> : META_TYPE_A extends ConstType ? ExcludeFromConst<META_TYPE_A, META_TYPE_B> : META_TYPE_A extends EnumType ? ExcludeFromEnum<META_TYPE_A, META_TYPE_B> : META_TYPE_A extends PrimitiveType ? ExcludeFromPrimitive<META_TYPE_A, META_TYPE_B> : META_TYPE_A extends ArrayType ? ExcludeFromArray<META_TYPE_A, META_TYPE_B> : META_TYPE_A extends TupleType ? ExcludeFromTuple<META_TYPE_A, META_TYPE_B> : META_TYPE_A extends ObjectType ? ExcludeFromObject<META_TYPE_A, META_TYPE_B> : META_TYPE_A extends UnionType ? ExcludeFromUnion<META_TYPE_A, META_TYPE_B> : Never;
